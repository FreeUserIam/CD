E XPERIMENT-1


Aim: Practice of LEX/YACC of compiler writing.
Theory: Lex is a tool or a computer program that generates Lexical Analyzers (converts the stream of characters into tokens). The Lex tool itself is a compiler. The Lex compiler takes the input and transforms that input into input patterns. It  is  commonly  used  with YACC (Yet Another Compiler Compiler). It was written by Mike Lesk and Eric Schmidt.
Yacc (for “yet another compiler compiler.”) is the standard parser generator for the Unix operating system. An open source program, yacc generates code for the parser in the C programming language. The acronym is usually rendered in lowercase but is occasionally seen as YACC or Yacc.
1.	LEX program to count the number of vowels and consonants in a given string. Source Code :
%{
int vow_count=0; int const_count =0;
%}

%%
[aeiouAEIOU] {vow_count++;} [a-zA-Z] {const_count++;}
%%
int yywrap(){} int main()
{
printf("Enter the string of vowels and consonants:"); yylex();
printf("Number of vowels are: %d\n", vow_count); printf("Number of consonants are: %d\n", const_count); return 0;
}



Output:

 
2.	YACC program to implement a Calculator and recognize a valid Arithmetic expression.

Lexical Analyzer Source Code:
%{
#include<stdio.h> #include "y.tab.h" extern int yylval;
%}

%%
[0-9]+ {
yylval=atoi(yytext); return NUMBER;

}
[\t] ;

[\n] return 0;

. return yytext[0];

%%

int yywrap()
{
return 1;
}


Parser Source Code :
%{
/* Definition section */ #include<stdio.h>
int flag=0;
%}

%token NUMBER

%left '+' '-'

%left '*' '/' '%'

%left '(' ')'

/* Rule Section */
%%

ArithmeticExpression: E{

printf("\nResult=%d\n", $$);
 
return 0;

}; E:E'+'E {$$=$1+$3;}

|E'-'E {$$=$1-$3;}

|E'*'E {$$=$1*$3;}

|E'/'E {$$=$1/$3;}

|E'%'E {$$=$1%$3;}

|'('E')' {$$=$2;}

| NUMBER {$$=$1;}

;

%%

//driver code void main()
{
printf("\nEnter Any Arithmetic Expression which
can have operations Addition, Subtraction, Multiplication, Division,
Modulus and Round brackets:\n");

yyparse(); if(flag==0)
printf("\nEntered arithmetic expression is Valid\n\n");
}

void yyerror()
{
printf("\nEntered arithmetic expression is Invalid\n\n"); flag=1;
}
 
Output:


 
 EXPERIMENT-2


Aim: Write a program to check whether a string belong to the grammar or not.

Theory: Context free grammar is a formal grammar which is used to generate all possible strings in a given formal language. Context free grammar G can be defined by four tuples as:

G = (V, T, P, S)
Where,
G: describes the grammar
T: describes a finite set of terminal symbols
V: describes a finite set of non-terminal symbols P: describes a set of production rules
S: is the start symbol
In CFG, the start symbol is used to derive the string. You can derive the string by repeatedly replacing a non-terminal by the right hand side of the production, until all non-terminal have been replaced by terminal symbols.

A grammar is said to be the Context-free grammar if every production is in the form: G → (V∪T)*, where G ⍷ V
•	And the left-hand side of the G, here in the example can only be a Variable, it cannot be a terminal.
•	But on the right-hand side here it can be a Variable or Terminal or both combination of Variable and Terminal.

Source Code:
#include <iostream> using namespace std; char str[20];
string str2="String does not belong to grammar";
string str3="String is invalid because of incorrect first character";

void notBelong() { cout << str2; exit(0);
}
void alphabet() { int i=0;
while (str[i]!='\0') {
if ((str[i] != 'a') && (str[i] != 'b')) { cout << "Invalid alphabets\n"; exit(0);
} i++;
 
}
}
void first() {
cout << "\nThe grammar is as follows:\nS -> aS\nS -> Sb\nS -> ab\n"; cout << "Enter a string: ";
cin >> str; alphabet();
if (str[0] != 'a') { cout << str3; exit(0);
}
int n = 1;
while (str[n] == 'a') { n++;
}
if (str[n] != 'b') { notBelong();
} n++;
while (str[n] == 'b') { n++;
}
if (str[n] != '\0') { notBelong();
}
cout << "string is valid\n";
}
void second() {
cout << "\nThe grammar is as follows:\nS -> aSa\nS -> bSb\nS -> a\nS -> b\n"; cout << "Enter a string: ";
cin >> str; alphabet(); int n=1,i=1;
while ((str[n]=='a') || (str[n]=='b')) { n++;
}
if (n%2==0) {
notBelong();
}
else {
while (i<((n/2)+1)) {
if (str[n-i]!=str[i-1]) { notBelong();
} i++;
}
}
cout << "String is valid\n";
}
void third() {
cout << "\nThe grammar is as follows:\nS -> aSbb\nS -> abb\n"; cout << "Enter a string: ";
cin >> str;
 
alphabet();
if (str[0] != 'a') { cout << str3; exit(0);
}
int n=1,i=1;
while (str[n]=='a') { n++;	i++;
}
i=2*i;
while (i>0) {
if (str[n]=='a') { notBelong();
}
else if (str[n]=='b') { n++;	i--;
}
else {
notBelong();
}
}
if (str[n]!='\0') { notBelong();
}
cout << "String is valid\n";
}
void fourth() {
cout << "\nThe grammar is as follows:\nS -> aSb\nS -> ab\n"; cout << "Enter a string: ";
cin >> str; alphabet();
if (str[0] != 'a') { cout << str3; exit(0);
}
int n=1,j=0;
while (str[n]=='a') { n++;
}
while (str[n]=='b') { n++;	j++;
}
if (str[n]!='\0') { notBelong();
}
if ((n-j)!=j) { notBelong();
}
cout << "String is valid\n";
}

int main() {
cout << "The Grammars are as follows:\n";
 
cout << "\nThe First Grammar is:\nS -> aS\nS -> Sb\nS -> ab\n";
cout << "\nThe Second Grammar is:\nS -> aSa\nS -> bSb\nS -> a\nS -> b\n"; cout << "\nThe Third Grammar is:\nS -> aSbb\nS -> abb\n";
cout << "\nThe Fourth Grammar is:\nS -> aSb\nS -> ab\n"; bool c=true;
while (c) {
cout << "\nPress 1 for First, 2 for Second, 3 for Third, 4 for Fourth Grammar, 0 to Quit\n"; cout << "Enter your choice: ";
int choice;
cin >> choice; switch (choice) {
case 0:
cout << "Quitting the Program\n"; c=false;
break; case 1:
first(); break;
case 2:
second(); break;
case 3:
third(); break;
case 4:
fourth(); break;
}
}
return 0;
}
 
Output:






 
 
 
 EXPERIMENT-3


Aim: Write a program to check whether a string include Keyword or not.

Theory: Keywords(also known as reserved words) have special meanings to the C++ compiler and are always written or typed in short(lower) cases. Keywords are words that the language uses for a special purpose, such as void, int, public, etc. It can’t be used for a variable name or function name or any other identifiers. The total count of reserved keywords is 95. Below is the table for some commonly used C++ keywords.

Source Code:
#include <iostream> using namespace std;

int main() { string
keyword[]={"alignas","or","or_eq","alignof","and_eq","and","bitand","bitor","char8_t","char16_t"," char32_t","compl","decltype","concept","consteval","constexpr","constinit","co_await","co_return", "co_yield","auto","double","int","using","static_assert","noexcept","not_eq","not","requires","struct"
,"export","nullptr","break","else","long","switch","case","enum","register","typedef","char","extern"
,"return","union","const","float","short","unsigned","continue","for","signed","void","default","goto"
,"sizeof","voltile","do","if","static","while","asm","dynamic_cast","namespace","reinterpret_cast","b
ool","explicit","new","static_cast","catch","false","operator","template","class","friend","private","th
is","const_cast","inline","public","throw","delete","mutable","protected","true","try","typeid","typen ame","wchar_t"};
string str;
cout << "Enter a String/Program (and end with $): "; getline(cin,str,'$');
int words=0,sum=0; string  str2[1000]; int a=0,b=0,x=0;
for (int i=0;i<str.length();i++) {
if (((str[i]==' ') || (str[i]=='\n')) && (str[i+1]==' ')) { x++;
}
else if ((str[i]==' ') || (str[i]=='\n')) { a=b;	b=i+1; str2[words]=str.substr(a,i-a-x); x=0;
words++;
}
}
str2[words]=str.substr(b,str.length()-b-x); words++;
int len=sizeof(keyword)/sizeof(keyword[0]); int count[len];
for (int i=0;i<len;i++) {
 
count[i]=0;
}
for (int i=0;i<words;i++) { for (int j=0;j<len;j++) {
if (str2[i]==keyword[j]) { count[j]++;	sum++; break;
}
}
}
cout << "\nKeywords present in the String/Program are: " << sum << endl; for (int i=0;i<len;i++) {
if (count[i]>0) {
cout << "\'" << keyword[i] << "\' keyword is present in the String/Program " << count[i] << " times\n";
}
}
return 0;
}




Output:


Input Provided to the Program is the Source Code of the Program2(ended with $)
 
 EXPERIMENT-4


Aim: Write a program to remove left Recursion from a Grammar.

Theory: Grammar of the form: S ⇒ S | a | b is called left recursive where S is any non Terminal and a and b are any set of terminals. Left recursion is a common problem that occurs in grammar during parsing in the syntax analysis part of compilation. It is important to remove left recursion from grammar because it can create an infinite loop, leading to errors and a significant decrease in performance.

Source Code: #include<iostream> #include<vector> using namespace std;

class NonTerminal { string name;
vector<string> productionRules; public:
NonTerminal(string name) { this->name = name;
}
string getName() { return name;
}
void setRules(vector<string> rules) { productionRules.clear();
for (auto rule : rules){ productionRules.push_back(rule);
}
}
vector<string> getRules() { return productionRules;
}
void addRule(string rule) { productionRules.push_back(rule);
}
void printRule() { string toPrint = "";
toPrint += name + " ->";
for (string s : productionRules){ toPrint += " " + s + " |";
}
toPrint.pop_back();  cout << toPrint << endl;
}
};

class Grammar {
 
vector<NonTerminal> nonTerminals; public:
void addRule(string rule) { bool nt = 0;
string parse = ""; for (char c : rule){ if (c == ' ') {
if (!nt) {
NonTerminal newNonTerminal(parse); nonTerminals.push_back(newNonTerminal); nt = 1;
parse = "";
}
else if (parse.size()) { nonTerminals.back().addRule(parse); parse = "";
}
}
else if (c != '|' && c != '-' && c != '>') { parse += c;
}
}
if (parse.size()){ nonTerminals.back().addRule(parse);
}
}
void inputData() { int n;
cout << "Enter the number of Production lines: "; cin >> n;
string rule[n];
cout << "Enter the Production rules (like A -> Ac | d):\n"; for (int i=0;i<=n;i++) {
getline(cin,rule[i]);
}
for (int i=0;i<=n;i++) { addRule(rule[i]);
}
}

// Algorithm for eliminating the non-Immediate Left Recursion
void solveNonImmediateLR(NonTerminal &A, NonTerminal &B) { string nameA = A.getName();
string nameB = B.getName(); vector<string> rulesA, rulesB, newRulesA; rulesA = A.getRules();
rulesB  = B.getRules();

for (auto rule : rulesA) {
if (rule.substr(0, nameB.size()) == nameB) { for (auto rule1 : rulesB){
newRulesA.push_back(rule1 + rule.substr(nameB.size()));
}
 
}
else{
newRulesA.push_back(rule);
}
}
A.setRules(newRulesA);
}

// Algorithm for eliminating Immediate Left Recursion void solveImmediateLR(NonTerminal &A) {
string name = A.getName(); string newName = name + "'";
vector<string> alphas, betas, rules, newRulesA, newRulesA1; rules = A.getRules();
for (auto rule : rules) {
if (rule.substr(0, name.size()) == name){ alphas.push_back(rule.substr(name.size()));
}
else{
betas.push_back(rule);
}
}
if (!alphas.size()) {
cout << "No left Recursion is present in the given grammar\n"; exit(0);
}
if (!betas.size()) { newRulesA.push_back(newName);
}
for (auto beta : betas) { newRulesA.push_back(beta + newName);
}
for (auto alpha : alphas) { newRulesA1.push_back(alpha + newName);
}
A.setRules(newRulesA); newRulesA1.push_back("\u03B5"); NonTerminal newNonTerminal(newName); newNonTerminal.setRules(newRulesA1); nonTerminals.push_back(newNonTerminal);
}

// Eliminates left recursion void applyAlgorithm() {
int size = nonTerminals.size(); for (int i = 0; i < size; i++){
for (int j = 0; j < i; j++){ solveNonImmediateLR(nonTerminals[i], nonTerminals[j]);
}
solveImmediateLR(nonTerminals[i]);
}
}
void printRules() {
 
cout << "The Production rules after removing left Recursion are:\n"; for (auto nonTerminal : nonTerminals){
nonTerminal.printRule();
}
}
};

int main(){
Grammar grammar; grammar.inputData(); grammar.applyAlgorithm(); grammar.printRules(); return 0;
}



Output:

 
 EXPERIMENT-5


Aim: Write a program to perform Left Factoring on a Grammar.

Theory: Grammar in the following form will be considered to be having left factored: S ⇒ aX | aY | aZ S, X, Y, and Z are non-terminal symbols, and a is terminal. So left, factored grammar is having multiple productions with the same prefix or starting with the same symbol. In the example, S ⇒ aX, S ⇒ aY, and S ⇒ aZ are three different productions with the same non–terminal symbol on the left-hand side, and the productions have a common prefix a. Hence the above grammar is left-factored.

Source Code:
#include<iostream> #include<string.h> using namespace std;

int main() {
char part1[20],part2[20],modifiedGram[20],newGram[20],tempGram[20]; string gram;
int i,j=0,k=0,l=0,pos;
cout << "Enter Production: A->"; getline(cin,gram);
for (i=0;gram[i]!='|';i++,j++) { part1[j]=gram[i];
}
part1[j]='\0';
for (j=++i,i=0;gram[j]!='\0';j++,i++) { part2[i]=gram[j];
}
part2[i]='\0';
for (i=0;i<strlen(part1)||i<strlen(part2);i++) { if (part1[i]==part2[i]) {
modifiedGram[k]=part1[i]; k++;
pos=i+1;
}
}
for (i=pos,j=0;part1[i]!='\0';i++,j++) { newGram[j]=part1[i];
}
newGram[j++]='|';
for (i=pos;part2[i]!='\0';i++,j++) { newGram[j]=part2[i];
}
modifiedGram[k]='X'; modifiedGram[++k]='\0'; newGram[j]='\0';
cout << "Grammar without Left Factoring is:\n"; cout << "A->" << modifiedGram;
 
cout << "\nX->" << newGram << endl;
}




Output:

 
 EXPERIMENT-6


Aim: Write a program to show all the operations of the stack.

Theory: Stack is a linear data structure that follows a particular order in which the operations are performed. The order may be LIFO(Last In First Out) or FILO(First In Last Out). LIFO implies that the element that is inserted last, comes out first and FILO implies that the element that is inserted first, comes out last. Thera are various operations in stack which are as follows:
i)	push() to insert an element into the stack.
ii)	pop() to remove an element from the stack
iii)	peek() Returns the top element of the stack.

Source Code:
#include <iostream> using namespace std; int  n,i,item,top=-1; int *stack=new int[n];

bool check(int val) {
if (top==n-1 && val==0) {
cout << "Stack full cannot push element\n"; return false;
}
else if (top==-1 && val==1) {
cout << "Stack empty cannot delete element\n"; return false;
}
return true;
}
void push() {
cout << "Enter the item to push: "; cin >> item;
top++; stack[top]=item;
}
int pop() { item=stack[top]; top--;
return item;
}
void peek() {
if (top==-1) {
cout << "The Top element in the stack is: \n";
}
else {
cout << "The Top element in the stack is: " << stack[top] << endl;
}
 
}
void display() {
cout << "The elements of stack are: "; for (i=top;i>=0;i--) {
if (i==0) {
cout << stack[0];
}
else {
cout << stack[i] << ",";
}
}
cout << endl;
}

int main() {
cout << "Enter the maximum size of the stack: "; cin >> n;
bool var=true; int choice; while (var) {
cout << "\nPush(1), Pop(2), Peek(3), Display(4), Quit(0)\n"; cout << "Enter your choice: ";
cin >> choice; switch (choice){
case 1: if (check(0)) { push();
}
break;
case 2: if (check(1)) {
cout << "The deleted element is: " << pop() << endl;
}
break;
case 3: peek(); break;
case 4: display(); break;
case 0: delete[] stack;
cout << "Exiting the program!\n"; exit(0);
}
}
return 0;
}
 
Output:

 
 EXPERIMENT-7


Aim: Write a program to find out the leading of the non-terminals in a grammar.

Theory: Leading is a list of all those terminals symbols which can appear first on any right hand side of a production. For each non-terminal i.e. left hand side,a Lead list containing the first terminal in each production for that non-terminal.Where a non- terminal is the first symbol on the right hand side, include both it and the first terminal.

Source Code:
#include<stdio.h>

char arr[18][3] ={{'E', '+', 'F'},{'E', '*', 'F'},{'E', '(', 'F'}, {'E', ')', 'F'},{'E', 'i', 'F'},{'E', '$', 'F'},
{'F', '+', 'F'},{'F', '*', 'F'},{'F', '(', 'F'},{'F', ')', 'F'},{'F', 'i', 'F'},{'F', '$', 'F'}, {'T', '+', 'F'},
{'T', '*', 'F'}, {'T', '(', 'F'},{'T', ')', 'F'},{'T', 'i', 'F'},{'T', '$', 'F'}};
char prod[7] = "EETTFF";
char res[6][3] ={ {'E', '+', 'T'}, {'T', '\0'}, {'T', '*', 'F'}, {'F', '\0'}, {'(', 'E', ')'}, {'i', '\0'}};
char stack [5][2]; int top = -1;

void install(char pro, char re) { int i;
for (i = 0; i < 18; ++i) {
if (arr[i][0] == pro && arr[i][1] == re) { arr[i][2] = 'T';
break;
}
}
++top; stack[top][0] = pro; stack[top][1] = re;
}

int main() { int i = 0, j;
char pro, re, pri = ' '; for (i = 0; i < 6; ++i) {
for (j = 0; j < 3 && res[i][j] != '\0'; ++j) {
if (res[i][j] == '+' || res[i][j] == '*' || res[i][j] == '(' || res[i][j] == ')' || res[i][j] == 'i' || res[i][j] ==
 
'$') {



}
}
 

install(prod[i], res[i][j]); break;
}
 
while (top >= 0)  { pro = stack[top][0]; re = stack[top][1];
 
--top;
for (i = 0; i < 6; ++i) {
if (res[i][0] == pro && res[i][0] != prod[i]) { install(prod[i], re);
}
}
}
for (i = 0; i < 18; ++i) { printf("\n\t");
for (j = 0; j < 3; ++j) printf("%c\t", arr[i][j]);
}
printf("\n\n");
for (i = 0; i < 18; ++i) { if (pri != arr[i][0]) {
pri = arr[i][0];
printf("\n\t%c: ", pri);
}
if (arr[i][2] == 'T')
printf("%c, ", arr[i][1]);
}
printf("\n"); return 0;
}
 
Output:

 
 EXPERIMENT-8


Aim: Write a program to implement Shift Reduce parsing for a String.

Theory: Shift Reduce parser attempts for the construction of parse in a similar manner as done in bottom-up parsing i.e. the parse tree is constructed from leaves(bottom) to the root(up). A more general form of the shift-reduce parser is the LR parser.

Source Code: #include <stdio.h> #include <string.h> #include<iostream> using namespace std;

struct ProductionRule { char left[10];
char right[10];
};

int main() {
char input[20], stack[50], temp[50], ch[2], *token1, *token2, *substring; int i, j, stack_length, substring_length, stack_top, rule_count = 0;
struct ProductionRule rules[10]; stack[0] = '\0';
printf("\nEnter the number of production rules: "); scanf("%d", &rule_count);
printf("\nEnter the production rules (in the form 'left->right'): \n"); for (i = 0; i < rule_count; i++) {
scanf("%s", temp);
token1 = strtok(temp, "->"); token2 = strtok(NULL, "->"); strcpy(rules[i].left, token1); strcpy(rules[i].right, token2);
}
printf("\nEnter the input string: "); scanf("%s", input);
i = 0;
cout << "Stack Input Action\n"; while (1) {
if (i < strlen(input)) { ch[0] = input[i];
ch[1] = '\0'; i++;
strcat(stack, ch); printf("%s\t", stack);
for (int k = i; k < strlen(input); k++) { printf("%c", input[k]);
}
printf("\tShift %s\n", ch);
 
}
for (j = 0; j < rule_count; j++) {  substring = strstr(stack, rules[j].right); if (substring != NULL) {
stack_length = strlen(stack); substring_length = strlen(substring); stack_top = stack_length - substring_length; stack[stack_top] = '\0';
strcat(stack, rules[j].left); printf("%s\t", stack);
for (int k = i; k < strlen(input); k++) { printf("%c", input[k]);
}
printf("\tReduce %s->%s\n", rules[j].left,  rules[j].right); j = -1;
}
}
if (strcmp(stack, rules[0].left) == 0 && i == strlen(input)) { printf("\nAccepted");
break;
}
if (i == strlen(input)) { printf("\nNot Accepted"); break;
}
}
return 0;
}
 
Output:

 
 EXPERIMENT-9


Aim: Write a program to find out the FIRST of the Non‐ terminals in a grammar.

Theory: FIRST function is used to find out the terminal symbols that are possible from both terminal and non-terminal symbols. The application of this function is widely seen in designing the Predictive parser tables that are used in designing compilers for various languages. Even the first compiler C, has an in built predictive parser which is operated through the calculation of the first and follow functions.

FIRST function is applied to both terminal symbols and non-terminal symbols such that its definition has certain rules to be employed. They are as follows:

1)	FIRST of any terminal symbol ‘a' is the terminal ‘a' itself.
2)	FIRST of non terminal ‘A' = FIRST of ‘@', where A -> @ such that @ is a string containing terminals and non-terminals.

FIRST of any entinty is given by FIRST(a) for terminal ‘a' and FIRST(A) for non - terminal ‘A'. The following program code simulates and computes the FIRST of the Grammar defined by the user at the compile time.

Source Code:
#include  <bits/stdc++.h> char array[10][20], temp[10]; int c, n;
void fun(int, int[]);
int fun2(int, int, int[], int); int main()
{
int p[2], i, j;
printf("Enter the no. of productions: "); scanf("%d", &n);
printf("Enter the productions:\n"); for (i = 0; i < n; i++)
scanf("%s", array[i]); for (i = 0; i < n; i++)
{
c = -1;
p[0] = -1;
p[1] = -1;
fun(i, p);
printf("First(%c) : [ ", array[i][0]); for (j = 0; j <= c; j++)
printf("%c,", temp[j]);
printf("\b ].\n");
}
 
return 0;
}
int fun2(int i, int j, int p[], int key)
{
int k;
if (!key)
{
for (k = 0; k < n; k++)
if (array[i][j] == array[k][0]) break;
p[0] = i;
p[1] = j + 1;
fun(k, p); return 0;
}
else
{
for (k = 0; k <= c; k++)
{
if (array[i][j] == temp[k]) break;
}
return (k > c) ? 1 : 0;
}
}
void fun(int i, int p[])
{
int j, k, key;
for (j = 2; array[i][j] != '\0'; j++)
{
if (array[i][j - 1] == '/')
{
if (array[i][j] >= 'A' && array[i][j] <= 'Z')
{
key = 0;
fun2(i, j, p, key);
}
else
{
key = 1;
if (fun2(i, j, p, key))
temp[++c] = array[i][j];
if (array[i][j] == '@' && p[0] != -1) // taking '@' as null symbol
{
if (array[p[0]][p[1]] >= 'A' && array[p[0]][p[1]] <= 'Z')
{
key = 0;
fun2(p[0], p[1], p, key);
}
else if (array[p[0]][p[1]] != '/' && array[p[0]][p[1]] != '\0')
{
if (fun2(p[0], p[1], p, key))
temp[++c] = array[p[0]][p[1]];
 
}
}
}
}
}
}

Output:


 
 EXPERIMENT-10


Aim: Write a program to check whether a grammar is operator precedent.

Theory: Operator precedence grammar is kinds of shift reduce parsing method. It is applied to a small class
of operator grammars.
A grammar is said to be operator precedence grammar if it has two properties: o No R.H.S. of any production has a∈.
o No two non-terminals are adjacent.
Operator precedence can only established between the terminals of the grammar. It ignores the
non-terminal.

Precedence table:


Parsing Action:
o	Both end of the given input string, add the $ symbol.
o	Now scan the input string from left right until the ⋗ is encountered.
o	Scan towards left over all the equal precedence until the first left most ⋖ is encountered.
o	Everything between left most ⋖ and right most ⋗ is a handle.
o	$ on $ means parsing is successful.

Source Code:
#include <stdio.h> #include <stdbool.h>

// Function to check whether the grammar is operator-precedent bool isOperatorPrecedent(char grammar[][3], int numRules)
{
for (int i = 0; i < numRules - 1; i++)
{
// Check if the precedence of the current rule is greater than or equal to the next rule if (grammar[i][1] >= grammar[i + 1][1])
{
return false;
}
 
// Check if the associativity of the current rule is the same as the next rule if (grammar[i][2] != grammar[i + 1][2])
{
return false;
}
}
return true;
}

int main()
{
// Maximum number of rules for simplicity int maxRules = 10;

// Example grammar: {operator, precedence, associativity} char grammar[maxRules][3];
printf("Enter the grammar rules in the format (operator precedence associativity), e.g., + 1 L:\n"); int numRules;
printf("Enter the number of rules: ");
scanf("%d", &numRules);

if (numRules > maxRules)
{
printf("Exceeded maximum number of rules. Exiting.\n"); return 1;
}

for (int i = 0; i < numRules; i++)
{
printf("Enter rule %d: ", i + 1);
scanf(" %c %d %c", &grammar[i][0], &grammar[i][1], &grammar[i][2]);
}

if (isOperatorPrecedent(grammar, numRules))
{
printf("The grammar is operator-precedent.\n");
}
else
{
printf("The grammar is not operator-precedent.\n");
}

return 0;
}
 
Output:



